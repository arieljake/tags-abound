
var listly = require('listly');
var underscore = require('underscore');
var userValidate = require('../validation/userValidate');

var UserREST = module.exports.UserREST = function (listlyServer)
{
	this.userDAO = listlyServer.userDAO;
};

UserREST.prototype.getUser = function (usernameParamName)
{
	return function (req,res)
	{
		var username = req.params[usernameParamName];

		this.userDAO.findUserByUsername(username, function(user)
		{
			delete user.password;
			delete user._id;

			res.send(listly.renderUtils.outputJSONP(req,user));
		});
	};
};

UserREST.prototype.updateUser = function (usernameParamName)
{
	return function (req,res)
	{
		var self = this;

		var username = req.params[usernameParamName];
		var postValues = req.body;
		var user = underscore.clone(postValues);

		this.userDAO.findUserByUsername(username,function (savedUser)
		{
			if (savedUser == null)
			{
				res.writeHead(404);
				res.end();
			}
			else
			{
				var userId = savedUser._id;
				var updateUser = userValidate.prepareForUpdate(user, savedUser);

				if (updateUser == null)
				{
					res.writeHead(304);
					res.end();
				}
				else
				{
					self.userDAO.updateUser(userId, updateUser, function (err)
					{
						if (err !== undefined)
						{
							res.writeHead(500);
							res.end();
						}
						else
						{
							res.writeHead(200);
							res.end();
						}
					});
				}
			}
		});
	};
};

UserREST.prototype.updateUserPassword = function (usernameParamName)
{
	return function (req,res)
	{
		var self = this;

		var username = req.params[usernameParamName];
		var postValues = req.body;
		var user = underscore.clone(postValues);

		this.userDAO.findUserByUsername(username,function (savedUser)
		{
			if (savedUser == null)
			{
				res.writeHead(404);
				res.end();
			}
			else
			{
				var userId = savedUser._id;
				var updateUser = userValidate.prepareForUpdatePassword(user, savedUser);

				if (updateUser == null)
				{
					res.writeHead(304);
					res.end();
				}
				else
				{
					self.userDAO.updateUser(userId, updateUser, function (err, users)
					{
						if (err !== undefined)
						{
							res.writeHead(500);
							res.end();
						}
						else
						{
							res.writeHead(200);
							res.end();
						}
					});
				}
			}
		});
	};
};

UserREST.prototype.createUser = function (req,res)
{
	var self = this;
	var userData = req.body;

	this.userDAO.findUserByUsername(userData.username, function (user)
	{
		if (user != null)
		{
			res.writeHead(207);
			res.end("that username is already being used");
		}
		else
		{
			var newUser = userValidate.prepareForCreate(userData);

			if (newUser == null)
			{
				res.writeHead(304);
				res.end();
			}
			else
			{
				self.userDAO.createUser(newUser,function (err)
				{
					if (err !== undefined)
					{
						res.writeHead(500);
						res.end();
					}
					else
					{
						self.userDAO.findUserByUsername(userData.username, function (user)
						{
							listly.session.createUserSession(user,req);

							if (listly.settings.sendRegistrationEmails)
								self.listlyEmailService.sendRegistrationEmail(user);

							res.writeHead(201);
							res.end('registration successful');
						});
					}
				})
			}
		}
	});
};