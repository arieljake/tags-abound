

var OAuth2Provider = require('oauth2-provider').OAuth2Provider;
var listly = require('listly');

var ListlyAuthProvider = module.exports.ListlyAuthProvider = function (listlyServer)
{
	this.grants = {};
	this.clients = {
		"ariel":"mysecret"
	};

	this.oauthProvider = new OAuth2Provider('232radasd12', 'asd2e2dwqwd');
	this.oauthProvider.on('enforce_login', oauthEventHandler(this,this.handleEnforceLogin));
	this.oauthProvider.on('authorize_form', oauthEventHandler(this,this.handleAuthorizeForm));
	this.oauthProvider.on('save_grant', oauthEventHandler(this,this.handleSaveGrant));
	this.oauthProvider.on('remove_grant', oauthEventHandler(this,this.handleRemoveGrant));
	this.oauthProvider.on('lookup_grant', oauthEventHandler(this,this.handleLookupGrant));
	this.oauthProvider.on('create_access_token', oauthEventHandler(this,this.handleCreateAccessToken));
	this.oauthProvider.on('access_token', oauthEventHandler(this,this.handleAccessToken));
};

var oauthEventHandler = function (scope,handler)
{
	return function ()
	{
		handler.apply(scope,arguments);
	};
};

ListlyAuthProvider.prototype.oauth = function ()
{
	return this.oauthProvider.oauth();
};

ListlyAuthProvider.prototype.login = function ()
{
	return this.oauthProvider.login();
};

ListlyAuthProvider.prototype.getUserGrant = function (user)
{
	return this.grants[user];
};

ListlyAuthProvider.prototype.createUserGrant = function (user)
{
	this.grants[user] = {};
};

ListlyAuthProvider.prototype.updateUserGrant = function (user,client_id,code)
{
	this.grants[user][client_id] = code;
};

ListlyAuthProvider.prototype.clearUserGrant = function (user_id,client_id)
{
	delete this.grants[user_id][client_id];
};

ListlyAuthProvider.prototype.handleEnforceLogin = function (req, res, authorize_url, next)
{
	if(req.session.user)
	{
		next(req.session.user);
	}
	else
	{
		res.writeHead(303, {Location: '/login?next=' + encodeURIComponent(authorize_url)});
		res.end();
	}
};

ListlyAuthProvider.prototype.handleAuthorizeForm = function (req, res, client_id, authorize_url)
{
	res.end('<html>this app wants to access your account... <form method="post" action="' + authorize_url + '"><button name="allow">Allow</button><button name="deny">Deny</button></form>');
};

ListlyAuthProvider.prototype.handleSaveGrant = function (req, client_id, code, next)
{
	var userGrant = this.getUserGrant(req.session.user);

	if (userGrant == null)
		this.createUserGrant(req.session.user);

	this.updateUserGrant(req.session.user,client_id,code);
	next();
};

ListlyAuthProvider.prototype.handleRemoveGrant = function (user_id, client_id, code)
{
	var userGrant = this.getUserGrant(user_id);

	if(userGrant && userGrant[client_id])
		this.clearUserGrant(user_id,client_id);
};

/**
 * verify that client id/secret pair are valid
 *
 * @param client_id
 * @param client_secret
 * @param code
 * @param next
 * @return {*}
 */
ListlyAuthProvider.prototype.handleLookupGrant = function (client_id, client_secret, code, next)
{
//	this.userDAO.findUserByUsername(client_id, function (user)
//	{
//		if (user != null && user.clientSecret == client_secret)
//		{
//			for(var user_id in this.grants)
//			{
//				var clients = this.grants[user_id];
//
//				if(clients[client_id] && clients[client_id] == code)
//					return next(null, user);
//			}
//		}
//
//		next(new Error('no such grant found'));
//	});

	if (client_id in this.clients && this.clients[client_id] == client_secret)
	{
		for (var user in this.grants)
		{
			var clients = this.grants[user];

			if (clients[client_id] && clients[client_id] == code)
				return next(null, user);
		}
	}

	next(new Error("no such grant found"));
};

ListlyAuthProvider.prototype.handleCreateAccessToken = function(user_id, client_id, next)
{
	var data = 'blah'; // can be any data type or null

	next(data);
};

ListlyAuthProvider.prototype.handleAccessToken = function (req, token, next)
{
	var TOKEN_TTL = 60 * 60 * 1000; // 1 hour

	if(token.grant_date.getTime() + TOKEN_TTL > Date.now())
	{
		req.session.user = token.user_id;
		req.session.data = token.extra_data;
	}
	else
	{
		console.warn('access token for user %s has expired', token.user_id);
	}

	next();
};