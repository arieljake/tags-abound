
var smtp = require('simplesmtp');

module.exports.createSmtpServer = function ()
{
	return new ListlySmtpServer();
};

function ListlySmtpServer(smtpServer)
{
	var self = this;

	this.smtpServer = smtp.createServer();
	this.smtpServer.on("startData", self.handleStartData);
	this.smtpServer.on("data", self.handleData);
	this.smtpServer.on("dataReady", self.handleDataReady);
	this.smtpServer.listen(25);
};

/**
 * startData (envelope) - DATA stream is opened by the client
 *
 * @param envelope is an object with from, to, host and remoteAddress properties
 */
ListlySmtpServer.prototype.handleStartData = function(envelope)
{
	console.log("Message from:", envelope.from);
	console.log("Message to:", envelope.to);
	// envelope.saveStream = fs.createWriteStream("/tmp/message.txt");
};

/**
 * data (envelope, chunk) - e-mail data chunk is passed from the client
 *
 * @param envelope
 * @param chunk
 */
ListlySmtpServer.prototype.handleData = function(envelope, chunk)
{
	// envelope.saveStream.write(chunk);
};

/**
 * dataReady (envelope, callback) - client is finished passing e-mail data, callback returns the queue id to the client
 *
 * @param envelope
 * @param callback
 */
ListlySmtpServer.prototype.handleDataReady = function(envelope, callback)
{
	// envelope.saveStream.end();
	console.log("Incoming message saved to /tmp/message.txt");
	callback(null, "ABC1"); // ABC1 is the queue id to be advertised to the client
	// callback(new Error("That was clearly a spam!"));
};

/**
 * authorizeUser (envelope, username, password, callback) - will be emitted if requireAuthentication option is set to true.
 *
 * @param envelope
 * @param username
 * @param password
 * @param callback has two parameters (err, success) where success is Boolean and should be true, if user is authenticated successfully
 */
ListlySmtpServer.prototype.handleAuthorizeUser = function(envelope, username, password, callback)
{

};

/**
 * validateSender (envelope, email, callback) - will be emitted if validateSender option is set to true
 *
 * @param envelope
 * @param email
 * @param callback
 */
ListlySmtpServer.prototype.handleValidateSender = function(envelope, email, callback)
{

};

/**
 * validateRecipient (envelope, email, callback) - will be emitted it validataRecipients option is set to true
 *
 * @param envelope
 * @param email
 * @param callback
 */
ListlySmtpServer.prototype.handleValidateRecipient = function(envelope, email, callback)
{

};

/**
 * close (envelope) - emitted when the connection to client is closed
 *
 * @param envelope
 */
ListlySmtpServer.prototype.handleClose = function(envelope)
{

};