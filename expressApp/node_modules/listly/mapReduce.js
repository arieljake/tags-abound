/* List Candidate Generation */

var listCandidates_map = function ()
{
	var get3letterCombos = function (options)
	{
		var output = [];

		var pos1 = 0;
		var pos2;
		var pos3;

		while (pos1 < options.length)
		{
			pos2 = pos1 + 1;

			while(pos2 < options.length)
			{
				pos3 = pos2 + 1;

				while (pos3 < options.length)
				{
					output.push(options[pos1] + "," + options[pos2] + "," + options[pos3]);

					pos3++;
				}

				pos2++;
			}

			pos1++;
		}

		return output;
	};

	var get2letterCombos = function (options)
	{
		var output = [];

		var pos1 = 0;
		var pos2;

		while(pos1 < options.length)
		{
			pos2 = pos1 + 1;

			while (pos2 < options.length)
			{
				output.push(options[pos1] + "," + options[pos2]);

				pos2++;
			}

			pos1++;
		}

		return output;
	};

	var get1letterCombos = function (options)
	{
		var output = [];

		var pos1 = 0;

		while (pos1 < options.length)
		{
			output.push(options[pos1]);

			pos1++;
		}

		return output;
	};

	if (this.tags !== undefined)
	{
		var itemTags = this.tags.toLowerCase().split(",");
		itemTags.sort();

		var tagCombos1 = get1letterCombos(itemTags);
		var tagCombos2 = get2letterCombos(itemTags);
		var tagCombos3 = get3letterCombos(itemTags);
		var allTagCombos = tagCombos1.concat(tagCombos2.concat(tagCombos3));

		while (allTagCombos.length > 0)
		{
			var tag = allTagCombos.pop();
			emit(tag,{count: 1, usages: [{title: this.title, id: this._id}]});
		}
	};
};

var listCandidates_reduce = function(key, values)
{
	var results = {_id: key, name: key, count: 0, usages: []};

	while (values.length > 0)
	{
		var value = values.pop();
		results.count = results.count + value.count;
		results.usages = results.usages.concat(value.usages);
	}

	return results;
};

/* Official lists (Min usages) */

var listOfficial_map = function ()
{
	if (this.value.count >= 2)
		emit(this._id,this.value);
};

var listOfficial_reduce = function(key, values)
{
	return values;
};

/* Submissions --> Lists lookup */

var submissionToListsLookup_map = function ()
{
	var usages = this.value.usages;

	while (usages.length > 0)
	{
		var usage = usages.pop();

		emit(usage.id,{lists: [this._id]});
	}
};

var submissionToListsLookup_reduce = function(key, values)
{
	var output = values[0];

	for (var i = 1; i < values.length; i++)
	{
		while (values[i].lists.length > 0)
		{
			var list = values[i].lists.pop();

			if (output.lists.indexOf(list) == -1)
			{
				output.lists.push(list);
			}
		}
	}

	return output;
};

/* MR Definitions */

var listCandidatesMR = {
	mapreduce: "v1_submission",
	out: "v1_submission_tagLists",
	map: listCandidates_map.toString(),
	reduce: listCandidates_reduce.toString()
};

var listOfficialMR = {
	mapreduce: "v1_submission_tagLists",
	out: "v1_list",
	map: listOfficial_map.toString(),
	reduce: listOfficial_reduce.toString()
};

var submissionToListsLookupMR = {
	mapreduce: "v1_list",
	out: "v1_submission_to_lists",
	map: submissionToListsLookup_map.toString(),
	reduce: submissionToListsLookup_reduce.toString()
};

/* Exports */

module.exports.performMapReduce = function (db, resultCallback, finalCallback)
{
	db.executeDbCommand(listCandidatesMR,function (err,results)
	{
		if (resultCallback !== undefined)
			resultCallback(results);

		db.executeDbCommand(listOfficialMR,function (err,results)
		{
			if (resultCallback !== undefined)
				resultCallback(results);

			db.executeDbCommand(submissionToListsLookupMR,function (err,results)
			{
				if (resultCallback !== undefined)
					resultCallback(results);

				finalCallback();
			});
		});
	});
};